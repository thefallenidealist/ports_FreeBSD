diff --git a/Action.c b/Action.c
index 518d103..70267d1 100644
--- a/Action.c
+++ b/Action.c
@@ -575,7 +575,7 @@ void Action_setBindings(Htop_Action* keys) {
    keys['q'] = actionQuit;
    keys['a'] = actionSetAffinity;
    keys[KEY_F(9)] = actionKill;
-   keys['k'] = actionKill;
+   keys['x'] = actionKill;
    keys[KEY_RECLICK] = actionExpandOrCollapse;
    keys['+'] = actionExpandOrCollapse;
    keys['='] = actionExpandOrCollapse;
@@ -586,12 +586,11 @@ void Action_setBindings(Htop_Action* keys) {
    keys['S'] = actionSetup;
    keys['C'] = actionSetup;
    keys[KEY_F(2)] = actionSetup;
-   keys['l'] = actionLsof;
+   keys['L'] = actionLsof;
    keys['s'] = actionStrace;
    keys[' '] = actionTag;
    keys['\014'] = actionRedraw; // Ctrl+L
    keys[KEY_F(1)] = actionHelp;
-   keys['h'] = actionHelp;
    keys['?'] = actionHelp;
    keys['U'] = actionUntagAll;
    keys['c'] = actionTagAllChildren;
diff --git a/Panel.c b/Panel.c
index 1e53b4a..e7f9d95 100644
--- a/Panel.c
+++ b/Panel.c
@@ -372,15 +372,17 @@ void Panel_draw(Panel* this, bool focus) {
 
 bool Panel_onKey(Panel* this, int key) {
    assert (this != NULL);
-   
+
    int size = Vector_size(this->items);
    switch (key) {
    case KEY_DOWN:
    case KEY_CTRL('N'):
+   case KEY_J:
       this->selected++;
       break;
    case KEY_UP:
    case KEY_CTRL('P'):
+   case KEY_K:
       this->selected--;
       break;
    #ifdef KEY_C_DOWN
@@ -394,23 +396,25 @@ bool Panel_onKey(Panel* this, int key) {
       break;
    #endif
    case KEY_LEFT:
-   case KEY_CTRL('B'):
+   case KEY_H:
       if (this->scrollH > 0) {
          this->scrollH -= MAX(CRT_scrollHAmount, 0);
          this->needsRedraw = true;
       }
       break;
    case KEY_RIGHT:
-   case KEY_CTRL('F'):
+   case KEY_L:
       this->scrollH += CRT_scrollHAmount;
       this->needsRedraw = true;
       break;
    case KEY_PPAGE:
+   case KEY_CTRL('B'):
       this->selected -= (this->h - 1);
       this->scrollV = MAX(0, this->scrollV - this->h + 1);
       this->needsRedraw = true;
       break;
    case KEY_NPAGE:
+   case KEY_CTRL('F'):
       this->selected += (this->h - 1);
       this->scrollV = MAX(0, MIN(Vector_size(this->items) - this->h,
                                  this->scrollV + this->h - 1));
@@ -432,9 +436,11 @@ bool Panel_onKey(Panel* this, int key) {
       break;
    }
    case KEY_HOME:
+   case KEY_G:
       this->selected = 0;
       break;
    case KEY_END:
+   case KEY_SHIFT_G:
       this->selected = size - 1;
       break;
    case KEY_CTRL('A'):
@@ -455,7 +461,7 @@ bool Panel_onKey(Panel* this, int key) {
    if (this->selected < 0 || size == 0) {
       this->selected = 0;
       this->needsRedraw = true;
-   } else if (this->selected >= size) {   
+   } else if (this->selected >= size) {
       this->selected = size - 1;
       this->needsRedraw = true;
    }
diff --git a/Panel.h b/Panel.h
index 5253fc2..c94ef0f 100644
--- a/Panel.h
+++ b/Panel.h
@@ -72,6 +72,13 @@ struct Panel_ {
 #endif
 
 #define KEY_CTRL(l) ((l)-'A'+1)
+// 190110 found out experimentally with ncurses example
+#define KEY_G		103
+#define KEY_SHIFT_G	71
+#define KEY_H		104
+#define KEY_J		106
+#define KEY_K		107
+#define KEY_L		108
 
 extern PanelClass Panel_class;
 
diff --git a/htop.1.in b/htop.1.in
index 774bc09..2361c96 100644
--- a/htop.1.in
+++ b/htop.1.in
@@ -51,27 +51,27 @@ Show processes in tree view
 The following commands are supported while in htop:
 .LP 
 .TP 5
-.B Up, Alt-k
+.B Up, Alt-k, k
 Select (highlight) the previous process in the process list. Scroll the list
 if necessary.
 .TP
-.B Down, Alt-j
+.B Down, Alt-j, j
 Select (highlight) the next process in the process list. Scroll the list if
 necessary.
 .TP
-.B Left, Alt-h
+.B Left, Alt-h, h
 Scroll the process list left.
 .TP
-.B Right, Alt-l
+.B Right, Alt-l, l
 Scroll the process list right.
 .TP
-.B PgUp, PgDn
+.B PgUp, PgDn, Ctrl-F, Ctrl-B
 Scroll the process list up or down one window.
 .TP
-.B Home
+.B Home, g
 Scroll to the top of the process list and select the first process.
 .TP
-.B End
+.B End, G
 Scroll to the bottom of the process list and select the last process.
 .TP
 .B Ctrl-A, ^
@@ -93,7 +93,7 @@ Trace process system calls: if strace(1) is installed, pressing this key
 will attach it to the currently selected process, presenting a live
 update of system calls issued by the process.
 .TP
-.B l
+.B L
 Display open files for a process: if lsof(1) is installed, pressing this key
 will display the list of file descriptors opened by the process.
 .TP
@@ -134,7 +134,7 @@ This can only be done by the superuser.
 .B F8, [
 Decrease the selected process's priority (add to 'nice' value)
 .TP
-.B F9, k
+.B F9, x
 "Kill" process: sends a signal which is selected in a menu, to one or a group
 of processes. If processes were tagged, sends the signal to all tagged processes.
 If none is tagged, sends to the currently selected process.
